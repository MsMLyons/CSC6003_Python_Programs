""" 
File: lyonsm_module_7.py
Author: Marki Lyons
Course: Foundations in Programming Fall 2023
Module: 7
Date Created: 2023-12-09
Date Updated: 2023-12-10

Description: The objective of this program is to compare 
two sorting algorithms for their time efficiency in sorting 
a large, randomized, dataset. The sorting algorithms chosen
for this comparison are insertion sort and merge sort.
"""

Evalutation Summary: 

I compared the Insertion Sort and Merge Sort algorithms. Insertion Sort was always slower than Merge Sort. Merge 
sort has an advantage when sorting large, randomized datasets because it divides the dataset into subsets, then 
merges them once sorted. Insertion Sort is better for almost-sorted lists since it moves one element at a time. 

__________________________________________________________________________________________________________________

--* Insertion Sort Results *--

Insertion Sort Beginning Timestamp: 2023-12-11 23:42:45.890599
Insertion Sort Ending Timestamp: 2023-12-11 23:42:45.912120
Insertion Sort Runtime in Milliseconds: 0.021521

--* Merge Sort Results *--

Merge Sort Beginning Timestamp: 2023-12-11 23:42:45.912120
Merge Sort Ending Timestamp: 2023-12-11 23:42:45.914119
Merge Sort Runtime in Milliseconds: 0.001999

--* Comparison of Insertion Sort and Merge Sort *--

The dataset and its copy included 1000 randomly generated numbers.
Result: Insertion Sort is slower than Merge Sort.

__________________________________________________________

--* Insertion Sort Results *--

Insertion Sort Beginning Timestamp: 2023-12-11 23:43:30.645567
Insertion Sort Ending Timestamp: 2023-12-11 23:43:33.156395
Insertion Sort Runtime in Milliseconds: 2.510828

--* Merge Sort Results *--

Merge Sort Beginning Timestamp: 2023-12-11 23:43:33.156395
Merge Sort Ending Timestamp: 2023-12-11 23:43:33.176810
Merge Sort Runtime in Milliseconds: 0.020415

--* Comparison of Insertion Sort and Merge Sort *--

The dataset and its copy included 10000 randomly generated numbers.
Result: Insertion Sort is slower than Merge Sort.

__________________________________________________________

--* Insertion Sort Results *--

Insertion Sort Beginning Timestamp: 2023-12-11 23:43:54.510677
Insertion Sort Ending Timestamp: 2023-12-11 23:48:39.174482
Insertion Sort Runtime in Milliseconds: 284.663805

--* Merge Sort Results *--

Merge Sort Beginning Timestamp: 2023-12-11 23:48:39.174482
Merge Sort Ending Timestamp: 2023-12-11 23:48:39.431236
Merge Sort Runtime in Milliseconds: 0.256754

--* Comparison of Insertion Sort and Merge Sort *--

The dataset and its copy included 100000 randomly generated numbers.
Result: Insertion Sort is slower than Merge Sort.