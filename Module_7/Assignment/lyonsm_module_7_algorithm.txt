""" 
File: lyonsm_module_7.py
Author: Marki Lyons
Course: Foundations in Programming Fall 2023
Module: 7
Date Created: 2023-12-09
Date Updated: 2023-12-12

Description: The objective of this program is to compare 
two sorting algorithms for their time efficiency in sorting 
a large, randomized, dataset. The sorting algorithms chosen
for this comparison are insertion sort and merge sort.
"""

Comparison of Insertion Sort and Merge Sort Algorithms

Step 1: Generate a list of random numbers (dataset)
1. Import the random module
2. Create a function to generate a random dataset of integers
    - use list comprehension 
    - set the range of values from 1 to 10000000
3. Set the dataset size by creating a variable that calls the function
    - include the parameter (value) for the dataset size in the function 
      call
    Note: The size of the dataset can be manipulated by changing the value
    of the parameter in #3, above. Results reported in the "best algorithm
    selection" text document were tested on datasets of 1000, 10000, and 
    100000 randomly generated integers between 1 and 1000000.
4. Copy the dataset for use in the second sorting algorithm
    - avoid using an already sorted dataset
    - call dataset.copy() to create a separate, equal dataset

Step 2: Make use of the Insertion Sort algorithm from the module 7 slides
1. The code for the algorithm can be found on slide 48
2. Make sure the algorithm references the dataset
 
Step 3: Create a function to print the results of the Insertion Sort algorithm
1. Include print statements for:
    - section title
    - beginning and ending timestamps
    - algorithm runtime measured in milliseconds
2. Measure start, execution, and end times of each sorting algorithm
    - make sure the datetime module has been imported
    - set the initializing and ending timestamps  
        - use datetime.now() to set the start and end times    
    - find the difference between the start and end times
        - convert the difference to milliseconds
3. Create a global variable to hold the difference in algorithm beginning and end
    runtimes
4. Repeat this step for the Merge Sort algorithm results

Step 4: Make use of the Merge Sort algorithm from the module 7 slides
1. The code for the algorithm can be found on slide 52
2. Make sure the algorithm references dataset_2 

Step 5: Create a function to get final results
1. Compare the results of each algorithms' runtime
2. Print the results
    - include the size of the datasets
    - include which algorithm performed more efficiently

Step 6: Create main funciton 
1. Call each of the results functions to print the results related to each algorithm